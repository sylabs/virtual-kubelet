version: 2

jobs:

  get_source:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/virtual-kubelet/virtual-kubelet
    steps:
      - run:
          name: echo
          command: echo $CIRCLE_REPOSITORY_URL
      - checkout
      - persist_to_workspace:
          root: /go
          paths:
            - src/github.com/virtual-kubelet/virtual-kubelet

  validate:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/virtual-kubelet/virtual-kubelet
    steps:
      - attach_workspace:
          at: /go
      - run:
          name: go vet
          command: V=1 CI=1 make vet
      - run:
          name: Install linters
          command: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | bash -s v1.10.2 && mv ./bin/* /go/bin/
      - run:
          name: Lint
          command: golangci-lint run --new-from-rev "HEAD~$(git rev-list master.. --count)" ./...
      - run:
          name: Dependencies
          command: scripts/validate/dep.sh

  test:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/virtual-kubelet/virtual-kubelet
    steps:
      - attach_workspace:
          at: /go
      - run:
          name: Build
          command: V=1 make build
      - run:
          name: Install Nomad
          command: |
            curl \
              --silent \
              --location \
              --output nomad.zip \
              https://releases.hashicorp.com/nomad/0.8.6/nomad_0.8.6_linux_amd64.zip && \
            unzip nomad.zip && \
            chmod +x nomad && \
            mv nomad /go/bin/nomad && \
            rm nomad.zip
      - run:
          name: Tests
          command: V=1 CI=1 SKIP_AWS_E2E=1 make test

  e2e:
    machine:
      image: circleci/classic:201808-01
    working_directory: /home/circleci/go/src/github.com/virtual-kubelet/virtual-kubelet
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
      GOPATH: /home/circleci/go
      KUBECONFIG: /home/circleci/.kube/config
      KUBERNETES_VERSION: v1.12.3
      MINIKUBE_HOME: /home/circleci
      MINIKUBE_VERSION: v0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      SKAFFOLD_VERSION: v0.18.0
    steps:
      - attach_workspace:
          at: ~/go
      - run:
          name: Install kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: Install Skaffold
          command: |
            curl -Lo skaffold https://github.com/GoogleContainerTools/skaffold/releases/download/${SKAFFOLD_VERSION}/skaffold-linux-amd64
            chmod +x skaffold
            sudo mv skaffold /usr/local/bin/
      - run:
          name: Install Minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64
            chmod +x minikube
            sudo mv minikube /usr/local/bin/
      - run:
          name: Start Minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${KUBERNETES_VERSION}
      - run:
          name: Wait for Minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: Watch pods
          command: kubectl get pods -o json --watch
          background: true
      - run:
          name: Watch nodes
          command: kubectl get nodes -o json --watch
          background: true
      - run:
          name: Run the end-to-end test suite
          command: |
            mkdir $HOME/.go
            export PATH=$HOME/.go/bin:${PATH}
            curl -fsSL -o "/tmp/go.tar.gz" "https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz"
            tar -C $HOME/.go --strip-components=1 -xzf "/tmp/go.tar.gz"
            go version
            make e2e
      - run:
          name: Collect logs on failure from vkubelet-mock-0
          command: |
            kubectl logs vkubelet-mock-0
          when: on_fail

  publish:
    machine: true
    steps:
      - attach_workspace:
          at: ~/go
      - run:
          name: Setup environment
          command: |
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' >> $BASH_ENV
            echo 'export PATH=$PATH:/usr/local/libexec/singularity/bin/' >> $BASH_ENV
      - run:
          name: Update go to 1.12
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.12.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.12.linux-amd64.tar.gz
      - run:
          name: Install prerequisities
          command: |
            sudo apt-get update -y
            sudo apt-get install -y expect build-essential libssl-dev uuid-dev squashfs-tools libseccomp-dev libgpgme11-dev
      - run:
          name: Install singularity
          command: |
            git clone https://github.com/sylabs/singularity.git $GOPATH/src/github.com/sylabs/singularity
            cd $GOPATH/src/github.com/sylabs/singularity
            ./mconfig -p /usr/local
            make -j$(nproc) -C ./builddir
            sudo make -C ./builddir install
      - run:
          name: Authorize remote library
          command: |
            mkdir $HOME/.singularity
            touch $HOME/.singularity/remote.yaml
            echo $E2E_AUTH_TOKEN > token
            singularity remote login --tokenfile token SylabsCloud
            singularity keys pull $SYLABS_KEY_FINGERPRINT
            echo $SYLABS_KEY_BASE64 | sed 's/ //g' | base64 -d - > key
            cat > import.sh <<EOF
            #!/usr/bin/expect -f
            set timeout -1
            spawn singularity keys import key
            expect "Enter your old password : "
            send -- "\r"
            expect "Enter a new password for this key : "
            send -- "\r"
            expect  "Retype your passphrase : "
            send -- "\r"
            expect eof
            EOF
            chmod +x import.sh
            ./import.sh
      - run:
          name: Publish image
          command: |
            TAG=latest
            cd $GOPATH/src/github.com/virtual-kubelet/virtual-kubelet
            cat > push.sh <<EOF
            #!/usr/bin/expect -f
            set timeout -1
            spawn make push TAG=${TAG}
            expect "Enter key passphrase : "
            send -- "\r"
            expect eof
            EOF
            chmod +x push.sh
            ./push.sh


workflows:
  version: 2
  validate_and_test:
    jobs:
      - get_source
      - validate:
          requires:
            - get_source
      - test:
          requires:
            - get_source
      - e2e:
          requires:
            - get_source
      - publish:
          context: scs-production
          filters:
            branches:
              only:
                - master
          requires:
            - validate
            - test
            - e2e
