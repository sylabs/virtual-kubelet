// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/workload/api/workload.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TailAction int32

const (
	TailAction_Start             TailAction = 0
	TailAction_ReadToEndAndClose TailAction = 1
)

var TailAction_name = map[int32]string{
	0: "Start",
	1: "ReadToEndAndClose",
}

var TailAction_value = map[string]int32{
	"Start":             0,
	"ReadToEndAndClose": 1,
}

func (x TailAction) String() string {
	return proto.EnumName(TailAction_name, int32(x))
}

func (TailAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{0}
}

type JobStatus int32

const (
	JobStatus_COMPLETED JobStatus = 0
	JobStatus_CANCELLED JobStatus = 1
	JobStatus_FAILED    JobStatus = 2
	JobStatus_TIMEOUT   JobStatus = 3
	JobStatus_PENDING   JobStatus = 4
	JobStatus_UNKNOWN   JobStatus = 10
)

var JobStatus_name = map[int32]string{
	0:  "COMPLETED",
	1:  "CANCELLED",
	2:  "FAILED",
	3:  "TIMEOUT",
	4:  "PENDING",
	10: "UNKNOWN",
}

var JobStatus_value = map[string]int32{
	"COMPLETED": 0,
	"CANCELLED": 1,
	"FAILED":    2,
	"TIMEOUT":   3,
	"PENDING":   4,
	"UNKNOWN":   10,
}

func (x JobStatus) String() string {
	return proto.EnumName(JobStatus_name, int32(x))
}

func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{1}
}

type SubmitJobRequest struct {
	// Bash script that will be submitted to a workload manager.
	Script string `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	// Partition where job should be submitted.
	Partition string `protobuf:"bytes,2,opt,name=partition,proto3" json:"partition,omitempty"`
	// ID of a client who submitted this job.
	ClientId             string   `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitJobRequest) Reset()         { *m = SubmitJobRequest{} }
func (m *SubmitJobRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitJobRequest) ProtoMessage()    {}
func (*SubmitJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{0}
}

func (m *SubmitJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitJobRequest.Unmarshal(m, b)
}
func (m *SubmitJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitJobRequest.Marshal(b, m, deterministic)
}
func (m *SubmitJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitJobRequest.Merge(m, src)
}
func (m *SubmitJobRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitJobRequest.Size(m)
}
func (m *SubmitJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitJobRequest proto.InternalMessageInfo

func (m *SubmitJobRequest) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *SubmitJobRequest) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *SubmitJobRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type SubmitJobResponse struct {
	// Job ID to track submitted job.
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitJobResponse) Reset()         { *m = SubmitJobResponse{} }
func (m *SubmitJobResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitJobResponse) ProtoMessage()    {}
func (*SubmitJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{1}
}

func (m *SubmitJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitJobResponse.Unmarshal(m, b)
}
func (m *SubmitJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitJobResponse.Marshal(b, m, deterministic)
}
func (m *SubmitJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitJobResponse.Merge(m, src)
}
func (m *SubmitJobResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitJobResponse.Size(m)
}
func (m *SubmitJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitJobResponse proto.InternalMessageInfo

func (m *SubmitJobResponse) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

type CancelJobRequest struct {
	// ID of a job to be cancelled.
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelJobRequest) Reset()         { *m = CancelJobRequest{} }
func (m *CancelJobRequest) String() string { return proto.CompactTextString(m) }
func (*CancelJobRequest) ProtoMessage()    {}
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{2}
}

func (m *CancelJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelJobRequest.Unmarshal(m, b)
}
func (m *CancelJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelJobRequest.Marshal(b, m, deterministic)
}
func (m *CancelJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelJobRequest.Merge(m, src)
}
func (m *CancelJobRequest) XXX_Size() int {
	return xxx_messageInfo_CancelJobRequest.Size(m)
}
func (m *CancelJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelJobRequest proto.InternalMessageInfo

func (m *CancelJobRequest) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

type CancelJobResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelJobResponse) Reset()         { *m = CancelJobResponse{} }
func (m *CancelJobResponse) String() string { return proto.CompactTextString(m) }
func (*CancelJobResponse) ProtoMessage()    {}
func (*CancelJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{3}
}

func (m *CancelJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelJobResponse.Unmarshal(m, b)
}
func (m *CancelJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelJobResponse.Marshal(b, m, deterministic)
}
func (m *CancelJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelJobResponse.Merge(m, src)
}
func (m *CancelJobResponse) XXX_Size() int {
	return xxx_messageInfo_CancelJobResponse.Size(m)
}
func (m *CancelJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelJobResponse proto.InternalMessageInfo

type JobInfoRequest struct {
	// ID of a job to fetch info of.
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobInfoRequest) Reset()         { *m = JobInfoRequest{} }
func (m *JobInfoRequest) String() string { return proto.CompactTextString(m) }
func (*JobInfoRequest) ProtoMessage()    {}
func (*JobInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{4}
}

func (m *JobInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobInfoRequest.Unmarshal(m, b)
}
func (m *JobInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobInfoRequest.Marshal(b, m, deterministic)
}
func (m *JobInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobInfoRequest.Merge(m, src)
}
func (m *JobInfoRequest) XXX_Size() int {
	return xxx_messageInfo_JobInfoRequest.Size(m)
}
func (m *JobInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobInfoRequest proto.InternalMessageInfo

func (m *JobInfoRequest) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

type JobInfoResponse struct {
	// Job information.
	Info                 []*JobInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *JobInfoResponse) Reset()         { *m = JobInfoResponse{} }
func (m *JobInfoResponse) String() string { return proto.CompactTextString(m) }
func (*JobInfoResponse) ProtoMessage()    {}
func (*JobInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{5}
}

func (m *JobInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobInfoResponse.Unmarshal(m, b)
}
func (m *JobInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobInfoResponse.Marshal(b, m, deterministic)
}
func (m *JobInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobInfoResponse.Merge(m, src)
}
func (m *JobInfoResponse) XXX_Size() int {
	return xxx_messageInfo_JobInfoResponse.Size(m)
}
func (m *JobInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobInfoResponse proto.InternalMessageInfo

func (m *JobInfoResponse) GetInfo() []*JobInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type JobStepsRequest struct {
	// ID of a job to fetch steps of.
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStepsRequest) Reset()         { *m = JobStepsRequest{} }
func (m *JobStepsRequest) String() string { return proto.CompactTextString(m) }
func (*JobStepsRequest) ProtoMessage()    {}
func (*JobStepsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{6}
}

func (m *JobStepsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStepsRequest.Unmarshal(m, b)
}
func (m *JobStepsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStepsRequest.Marshal(b, m, deterministic)
}
func (m *JobStepsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStepsRequest.Merge(m, src)
}
func (m *JobStepsRequest) XXX_Size() int {
	return xxx_messageInfo_JobStepsRequest.Size(m)
}
func (m *JobStepsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStepsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobStepsRequest proto.InternalMessageInfo

func (m *JobStepsRequest) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

type JobStepsResponse struct {
	// Job steps information.
	JobSteps             []*JobStepInfo `protobuf:"bytes,1,rep,name=job_steps,json=jobSteps,proto3" json:"job_steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *JobStepsResponse) Reset()         { *m = JobStepsResponse{} }
func (m *JobStepsResponse) String() string { return proto.CompactTextString(m) }
func (*JobStepsResponse) ProtoMessage()    {}
func (*JobStepsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{7}
}

func (m *JobStepsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStepsResponse.Unmarshal(m, b)
}
func (m *JobStepsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStepsResponse.Marshal(b, m, deterministic)
}
func (m *JobStepsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStepsResponse.Merge(m, src)
}
func (m *JobStepsResponse) XXX_Size() int {
	return xxx_messageInfo_JobStepsResponse.Size(m)
}
func (m *JobStepsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStepsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobStepsResponse proto.InternalMessageInfo

func (m *JobStepsResponse) GetJobSteps() []*JobStepInfo {
	if m != nil {
		return m.JobSteps
	}
	return nil
}

type OpenFileRequest struct {
	// Path to file to open.
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenFileRequest) Reset()         { *m = OpenFileRequest{} }
func (m *OpenFileRequest) String() string { return proto.CompactTextString(m) }
func (*OpenFileRequest) ProtoMessage()    {}
func (*OpenFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{8}
}

func (m *OpenFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenFileRequest.Unmarshal(m, b)
}
func (m *OpenFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenFileRequest.Marshal(b, m, deterministic)
}
func (m *OpenFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenFileRequest.Merge(m, src)
}
func (m *OpenFileRequest) XXX_Size() int {
	return xxx_messageInfo_OpenFileRequest.Size(m)
}
func (m *OpenFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenFileRequest proto.InternalMessageInfo

func (m *OpenFileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ResourcesRequest struct {
	// Partition which resources should be returned.
	Partition            string   `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourcesRequest) Reset()         { *m = ResourcesRequest{} }
func (m *ResourcesRequest) String() string { return proto.CompactTextString(m) }
func (*ResourcesRequest) ProtoMessage()    {}
func (*ResourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{9}
}

func (m *ResourcesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourcesRequest.Unmarshal(m, b)
}
func (m *ResourcesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourcesRequest.Marshal(b, m, deterministic)
}
func (m *ResourcesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcesRequest.Merge(m, src)
}
func (m *ResourcesRequest) XXX_Size() int {
	return xxx_messageInfo_ResourcesRequest.Size(m)
}
func (m *ResourcesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcesRequest proto.InternalMessageInfo

func (m *ResourcesRequest) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

type ResourcesResponse struct {
	// Number of nodes in the partition.
	Nodes int64 `protobuf:"varint,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// Number of cpus on each node.
	CpuPerNode int64 `protobuf:"varint,2,opt,name=cpuPerNode,proto3" json:"cpuPerNode,omitempty"`
	// Amount of memory on each node.
	MemPerNode int64 `protobuf:"varint,3,opt,name=memPerNode,proto3" json:"memPerNode,omitempty"`
	// Wall time setting for the partition.
	WallTime int64 `protobuf:"varint,4,opt,name=wallTime,proto3" json:"wallTime,omitempty"`
	// Set of features of the partition.
	Features             []*Feature `protobuf:"bytes,5,rep,name=features,proto3" json:"features,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ResourcesResponse) Reset()         { *m = ResourcesResponse{} }
func (m *ResourcesResponse) String() string { return proto.CompactTextString(m) }
func (*ResourcesResponse) ProtoMessage()    {}
func (*ResourcesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{10}
}

func (m *ResourcesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourcesResponse.Unmarshal(m, b)
}
func (m *ResourcesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourcesResponse.Marshal(b, m, deterministic)
}
func (m *ResourcesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcesResponse.Merge(m, src)
}
func (m *ResourcesResponse) XXX_Size() int {
	return xxx_messageInfo_ResourcesResponse.Size(m)
}
func (m *ResourcesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcesResponse proto.InternalMessageInfo

func (m *ResourcesResponse) GetNodes() int64 {
	if m != nil {
		return m.Nodes
	}
	return 0
}

func (m *ResourcesResponse) GetCpuPerNode() int64 {
	if m != nil {
		return m.CpuPerNode
	}
	return 0
}

func (m *ResourcesResponse) GetMemPerNode() int64 {
	if m != nil {
		return m.MemPerNode
	}
	return 0
}

func (m *ResourcesResponse) GetWallTime() int64 {
	if m != nil {
		return m.WallTime
	}
	return 0
}

func (m *ResourcesResponse) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

type PartitionsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionsRequest) Reset()         { *m = PartitionsRequest{} }
func (m *PartitionsRequest) String() string { return proto.CompactTextString(m) }
func (*PartitionsRequest) ProtoMessage()    {}
func (*PartitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{11}
}

func (m *PartitionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionsRequest.Unmarshal(m, b)
}
func (m *PartitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionsRequest.Marshal(b, m, deterministic)
}
func (m *PartitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionsRequest.Merge(m, src)
}
func (m *PartitionsRequest) XXX_Size() int {
	return xxx_messageInfo_PartitionsRequest.Size(m)
}
func (m *PartitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionsRequest proto.InternalMessageInfo

type PartitionsResponse struct {
	Partition            []string `protobuf:"bytes,1,rep,name=partition,proto3" json:"partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionsResponse) Reset()         { *m = PartitionsResponse{} }
func (m *PartitionsResponse) String() string { return proto.CompactTextString(m) }
func (*PartitionsResponse) ProtoMessage()    {}
func (*PartitionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{12}
}

func (m *PartitionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionsResponse.Unmarshal(m, b)
}
func (m *PartitionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionsResponse.Marshal(b, m, deterministic)
}
func (m *PartitionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionsResponse.Merge(m, src)
}
func (m *PartitionsResponse) XXX_Size() int {
	return xxx_messageInfo_PartitionsResponse.Size(m)
}
func (m *PartitionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionsResponse proto.InternalMessageInfo

func (m *PartitionsResponse) GetPartition() []string {
	if m != nil {
		return m.Partition
	}
	return nil
}

type WorkloadInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadInfoRequest) Reset()         { *m = WorkloadInfoRequest{} }
func (m *WorkloadInfoRequest) String() string { return proto.CompactTextString(m) }
func (*WorkloadInfoRequest) ProtoMessage()    {}
func (*WorkloadInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{13}
}

func (m *WorkloadInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadInfoRequest.Unmarshal(m, b)
}
func (m *WorkloadInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadInfoRequest.Marshal(b, m, deterministic)
}
func (m *WorkloadInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadInfoRequest.Merge(m, src)
}
func (m *WorkloadInfoRequest) XXX_Size() int {
	return xxx_messageInfo_WorkloadInfoRequest.Size(m)
}
func (m *WorkloadInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadInfoRequest proto.InternalMessageInfo

type WorkloadInfoResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uid                  int64    `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadInfoResponse) Reset()         { *m = WorkloadInfoResponse{} }
func (m *WorkloadInfoResponse) String() string { return proto.CompactTextString(m) }
func (*WorkloadInfoResponse) ProtoMessage()    {}
func (*WorkloadInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{14}
}

func (m *WorkloadInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadInfoResponse.Unmarshal(m, b)
}
func (m *WorkloadInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadInfoResponse.Marshal(b, m, deterministic)
}
func (m *WorkloadInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadInfoResponse.Merge(m, src)
}
func (m *WorkloadInfoResponse) XXX_Size() int {
	return xxx_messageInfo_WorkloadInfoResponse.Size(m)
}
func (m *WorkloadInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadInfoResponse proto.InternalMessageInfo

func (m *WorkloadInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkloadInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *WorkloadInfoResponse) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type SubmitJobContainerRequest struct {
	// Job image name
	ImageName string `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"`
	// Number of nodes in the partition.
	Nodes int64 `protobuf:"varint,2,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// Number of cpus on each node.
	CpuPerNode int64 `protobuf:"varint,3,opt,name=cpuPerNode,proto3" json:"cpuPerNode,omitempty"`
	// Amount of memory on each node.
	MemPerNode int64 `protobuf:"varint,4,opt,name=memPerNode,proto3" json:"memPerNode,omitempty"`
	// Wall time setting for the partition.
	WallTime int64 `protobuf:"varint,5,opt,name=wallTime,proto3" json:"wallTime,omitempty"`
	// Partition where job should be submitted.
	Partition string `protobuf:"bytes,6,opt,name=partition,proto3" json:"partition,omitempty"`
	// ID of a client who submitted this job.
	ClientId             string   `protobuf:"bytes,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitJobContainerRequest) Reset()         { *m = SubmitJobContainerRequest{} }
func (m *SubmitJobContainerRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitJobContainerRequest) ProtoMessage()    {}
func (*SubmitJobContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{15}
}

func (m *SubmitJobContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitJobContainerRequest.Unmarshal(m, b)
}
func (m *SubmitJobContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitJobContainerRequest.Marshal(b, m, deterministic)
}
func (m *SubmitJobContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitJobContainerRequest.Merge(m, src)
}
func (m *SubmitJobContainerRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitJobContainerRequest.Size(m)
}
func (m *SubmitJobContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitJobContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitJobContainerRequest proto.InternalMessageInfo

func (m *SubmitJobContainerRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *SubmitJobContainerRequest) GetNodes() int64 {
	if m != nil {
		return m.Nodes
	}
	return 0
}

func (m *SubmitJobContainerRequest) GetCpuPerNode() int64 {
	if m != nil {
		return m.CpuPerNode
	}
	return 0
}

func (m *SubmitJobContainerRequest) GetMemPerNode() int64 {
	if m != nil {
		return m.MemPerNode
	}
	return 0
}

func (m *SubmitJobContainerRequest) GetWallTime() int64 {
	if m != nil {
		return m.WallTime
	}
	return 0
}

func (m *SubmitJobContainerRequest) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *SubmitJobContainerRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type SubmitJobContainerResponse struct {
	// Job ID to track submitted job.
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitJobContainerResponse) Reset()         { *m = SubmitJobContainerResponse{} }
func (m *SubmitJobContainerResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitJobContainerResponse) ProtoMessage()    {}
func (*SubmitJobContainerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{16}
}

func (m *SubmitJobContainerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitJobContainerResponse.Unmarshal(m, b)
}
func (m *SubmitJobContainerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitJobContainerResponse.Marshal(b, m, deterministic)
}
func (m *SubmitJobContainerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitJobContainerResponse.Merge(m, src)
}
func (m *SubmitJobContainerResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitJobContainerResponse.Size(m)
}
func (m *SubmitJobContainerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitJobContainerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitJobContainerResponse proto.InternalMessageInfo

func (m *SubmitJobContainerResponse) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

type TailFileRequest struct {
	Action TailAction `protobuf:"varint,1,opt,name=action,proto3,enum=api.TailAction" json:"action,omitempty"`
	// Path to file to tail.
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TailFileRequest) Reset()         { *m = TailFileRequest{} }
func (m *TailFileRequest) String() string { return proto.CompactTextString(m) }
func (*TailFileRequest) ProtoMessage()    {}
func (*TailFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{17}
}

func (m *TailFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TailFileRequest.Unmarshal(m, b)
}
func (m *TailFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TailFileRequest.Marshal(b, m, deterministic)
}
func (m *TailFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TailFileRequest.Merge(m, src)
}
func (m *TailFileRequest) XXX_Size() int {
	return xxx_messageInfo_TailFileRequest.Size(m)
}
func (m *TailFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TailFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TailFileRequest proto.InternalMessageInfo

func (m *TailFileRequest) GetAction() TailAction {
	if m != nil {
		return m.Action
	}
	return TailAction_Start
}

func (m *TailFileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// JobInfo represents compete information about a single job.
type JobInfo struct {
	// ID of a job.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of a user who submitted the job.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Job name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Job exit code. For slurm workload manager will be in form "int:int".
	ExitCode string `protobuf:"bytes,4,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Job current status.
	Status JobStatus `protobuf:"varint,5,opt,name=status,proto3,enum=api.JobStatus" json:"status,omitempty"`
	// Job submit time.
	SubmitTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	// Job start time.
	StartTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Job running time.
	RunTime *duration.Duration `protobuf:"bytes,8,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	// Job time limit.
	TimeLimit *duration.Duration `protobuf:"bytes,9,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	// Job working directory.
	WorkingDir string `protobuf:"bytes,10,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	// Path to job's standard output file.
	StdOut string `protobuf:"bytes,11,opt,name=std_out,json=stdOut,proto3" json:"std_out,omitempty"`
	// Path to job's standard error file.
	StdErr string `protobuf:"bytes,12,opt,name=std_err,json=stdErr,proto3" json:"std_err,omitempty"`
	// Cluster partition on which job resides.
	Partition string `protobuf:"bytes,13,opt,name=partition,proto3" json:"partition,omitempty"`
	// List of nodes on which job is executed.
	NodeList string `protobuf:"bytes,14,opt,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
	// Host from which job was submitted.
	BatchHost string `protobuf:"bytes,15,opt,name=batch_host,json=batchHost,proto3" json:"batch_host,omitempty"`
	// Number of nodes requested by job.
	NumNodes string `protobuf:"bytes,16,opt,name=num_nodes,json=numNodes,proto3" json:"num_nodes,omitempty"`
	// Job array id.
	ArrayId              string   `protobuf:"bytes,17,opt,name=array_id,json=arrayId,proto3" json:"array_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobInfo) Reset()         { *m = JobInfo{} }
func (m *JobInfo) String() string { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()    {}
func (*JobInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{18}
}

func (m *JobInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobInfo.Unmarshal(m, b)
}
func (m *JobInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobInfo.Marshal(b, m, deterministic)
}
func (m *JobInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobInfo.Merge(m, src)
}
func (m *JobInfo) XXX_Size() int {
	return xxx_messageInfo_JobInfo.Size(m)
}
func (m *JobInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobInfo proto.InternalMessageInfo

func (m *JobInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *JobInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobInfo) GetExitCode() string {
	if m != nil {
		return m.ExitCode
	}
	return ""
}

func (m *JobInfo) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatus_COMPLETED
}

func (m *JobInfo) GetSubmitTime() *timestamp.Timestamp {
	if m != nil {
		return m.SubmitTime
	}
	return nil
}

func (m *JobInfo) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *JobInfo) GetRunTime() *duration.Duration {
	if m != nil {
		return m.RunTime
	}
	return nil
}

func (m *JobInfo) GetTimeLimit() *duration.Duration {
	if m != nil {
		return m.TimeLimit
	}
	return nil
}

func (m *JobInfo) GetWorkingDir() string {
	if m != nil {
		return m.WorkingDir
	}
	return ""
}

func (m *JobInfo) GetStdOut() string {
	if m != nil {
		return m.StdOut
	}
	return ""
}

func (m *JobInfo) GetStdErr() string {
	if m != nil {
		return m.StdErr
	}
	return ""
}

func (m *JobInfo) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *JobInfo) GetNodeList() string {
	if m != nil {
		return m.NodeList
	}
	return ""
}

func (m *JobInfo) GetBatchHost() string {
	if m != nil {
		return m.BatchHost
	}
	return ""
}

func (m *JobInfo) GetNumNodes() string {
	if m != nil {
		return m.NumNodes
	}
	return ""
}

func (m *JobInfo) GetArrayId() string {
	if m != nil {
		return m.ArrayId
	}
	return ""
}

// JobStepInfo represents information about a single job step.
type JobStepInfo struct {
	// ID od a job step.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Job step name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Job step exit code.
	ExitCode int32 `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Job step current status.
	Status JobStatus `protobuf:"varint,4,opt,name=status,proto3,enum=api.JobStatus" json:"status,omitempty"`
	// Job step start time.
	StartTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Job step end time.
	EndTime              *timestamp.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *JobStepInfo) Reset()         { *m = JobStepInfo{} }
func (m *JobStepInfo) String() string { return proto.CompactTextString(m) }
func (*JobStepInfo) ProtoMessage()    {}
func (*JobStepInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{19}
}

func (m *JobStepInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStepInfo.Unmarshal(m, b)
}
func (m *JobStepInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStepInfo.Marshal(b, m, deterministic)
}
func (m *JobStepInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStepInfo.Merge(m, src)
}
func (m *JobStepInfo) XXX_Size() int {
	return xxx_messageInfo_JobStepInfo.Size(m)
}
func (m *JobStepInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStepInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobStepInfo proto.InternalMessageInfo

func (m *JobStepInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobStepInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobStepInfo) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *JobStepInfo) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatus_COMPLETED
}

func (m *JobStepInfo) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *JobStepInfo) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

// Chunk is an arbitrary amount of bytes.
type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{20}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Feature struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Quantity             int64    `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3bd06263c8633f, []int{21}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Feature) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func init() {
	proto.RegisterEnum("api.TailAction", TailAction_name, TailAction_value)
	proto.RegisterEnum("api.JobStatus", JobStatus_name, JobStatus_value)
	proto.RegisterType((*SubmitJobRequest)(nil), "api.SubmitJobRequest")
	proto.RegisterType((*SubmitJobResponse)(nil), "api.SubmitJobResponse")
	proto.RegisterType((*CancelJobRequest)(nil), "api.CancelJobRequest")
	proto.RegisterType((*CancelJobResponse)(nil), "api.CancelJobResponse")
	proto.RegisterType((*JobInfoRequest)(nil), "api.JobInfoRequest")
	proto.RegisterType((*JobInfoResponse)(nil), "api.JobInfoResponse")
	proto.RegisterType((*JobStepsRequest)(nil), "api.JobStepsRequest")
	proto.RegisterType((*JobStepsResponse)(nil), "api.JobStepsResponse")
	proto.RegisterType((*OpenFileRequest)(nil), "api.OpenFileRequest")
	proto.RegisterType((*ResourcesRequest)(nil), "api.ResourcesRequest")
	proto.RegisterType((*ResourcesResponse)(nil), "api.ResourcesResponse")
	proto.RegisterType((*PartitionsRequest)(nil), "api.PartitionsRequest")
	proto.RegisterType((*PartitionsResponse)(nil), "api.PartitionsResponse")
	proto.RegisterType((*WorkloadInfoRequest)(nil), "api.WorkloadInfoRequest")
	proto.RegisterType((*WorkloadInfoResponse)(nil), "api.WorkloadInfoResponse")
	proto.RegisterType((*SubmitJobContainerRequest)(nil), "api.SubmitJobContainerRequest")
	proto.RegisterType((*SubmitJobContainerResponse)(nil), "api.SubmitJobContainerResponse")
	proto.RegisterType((*TailFileRequest)(nil), "api.TailFileRequest")
	proto.RegisterType((*JobInfo)(nil), "api.JobInfo")
	proto.RegisterType((*JobStepInfo)(nil), "api.JobStepInfo")
	proto.RegisterType((*Chunk)(nil), "api.Chunk")
	proto.RegisterType((*Feature)(nil), "api.Feature")
}

func init() { proto.RegisterFile("pkg/workload/api/workload.proto", fileDescriptor_5a3bd06263c8633f) }

var fileDescriptor_5a3bd06263c8633f = []byte{
	// 1199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x0e, 0x45, 0x1d, 0xc8, 0x91, 0x23, 0xd1, 0x1b, 0x3b, 0xa1, 0x99, 0xff, 0x8f, 0x53, 0x02,
	0x6d, 0xdc, 0x00, 0x95, 0x0d, 0x25, 0x45, 0xdb, 0x14, 0xbd, 0x30, 0x64, 0xa5, 0x55, 0xea, 0xc8,
	0x06, 0xad, 0x34, 0x37, 0x05, 0x84, 0x95, 0xb8, 0x96, 0x37, 0x96, 0xb8, 0x0c, 0xb9, 0x6c, 0x9a,
	0xa7, 0xea, 0xeb, 0xf4, 0x09, 0x8a, 0xde, 0xf6, 0x0d, 0x8a, 0x5d, 0x2e, 0x29, 0x8a, 0xf2, 0xa1,
	0xb9, 0xdb, 0x99, 0xf9, 0xbe, 0x3d, 0xcc, 0x69, 0x07, 0x76, 0xc3, 0xcb, 0xd9, 0xfe, 0x07, 0x16,
	0x5d, 0xce, 0x19, 0xf6, 0xf7, 0x71, 0x48, 0x73, 0xa1, 0x13, 0x46, 0x8c, 0x33, 0xa4, 0xe3, 0x90,
	0x3a, 0xbb, 0x33, 0xc6, 0x66, 0x73, 0xb2, 0x2f, 0x55, 0x93, 0xe4, 0x7c, 0x9f, 0xd3, 0x05, 0x89,
	0x39, 0x5e, 0x84, 0x29, 0xca, 0x79, 0x54, 0x06, 0xf8, 0x49, 0x84, 0x39, 0x65, 0x41, 0x6a, 0x77,
	0x09, 0x58, 0x67, 0xc9, 0x64, 0x41, 0xf9, 0x2b, 0x36, 0xf1, 0xc8, 0xfb, 0x84, 0xc4, 0x1c, 0xdd,
	0x87, 0x7a, 0x3c, 0x8d, 0x68, 0xc8, 0x6d, 0xed, 0xb1, 0xb6, 0x67, 0x7a, 0x4a, 0x42, 0xff, 0x03,
	0x33, 0xc4, 0x11, 0xa7, 0x82, 0x6e, 0x57, 0xa4, 0x69, 0xa9, 0x40, 0x0f, 0xc1, 0x9c, 0xce, 0x29,
	0x09, 0xf8, 0x98, 0xfa, 0xb6, 0x2e, 0xad, 0x46, 0xaa, 0x18, 0xf8, 0xee, 0x53, 0xd8, 0x2c, 0x1c,
	0x13, 0x87, 0x2c, 0x88, 0x09, 0xda, 0x86, 0xfa, 0x3b, 0x36, 0x11, 0x70, 0x71, 0x8e, 0xee, 0xd5,
	0xde, 0xb1, 0xc9, 0xc0, 0x77, 0xbf, 0x04, 0xab, 0x87, 0x83, 0x29, 0x99, 0x17, 0xae, 0x74, 0x0d,
	0xf4, 0x1e, 0x6c, 0x16, 0xa0, 0xe9, 0xb6, 0xee, 0x13, 0x68, 0xbd, 0x62, 0x93, 0x41, 0x70, 0xce,
	0x6e, 0x61, 0x3f, 0x83, 0x76, 0x0e, 0x54, 0x57, 0x7a, 0x0c, 0x55, 0x1a, 0x9c, 0x33, 0x5b, 0x7b,
	0xac, 0xef, 0x35, 0xbb, 0x1b, 0x1d, 0x1c, 0xd2, 0x4e, 0x86, 0x91, 0x16, 0x77, 0x4f, 0x92, 0xce,
	0x38, 0x09, 0xe3, 0x5b, 0xb6, 0x3f, 0x04, 0x6b, 0x89, 0x54, 0xfb, 0x7f, 0x05, 0xa6, 0x80, 0xc6,
	0x42, 0xa9, 0x0e, 0xb1, 0xb2, 0x43, 0x04, 0x52, 0x1e, 0x64, 0xbc, 0x53, 0x34, 0xf7, 0x73, 0x68,
	0x9f, 0x84, 0x24, 0x78, 0x49, 0xe7, 0x24, 0x3b, 0x0c, 0x41, 0x35, 0xc4, 0xfc, 0x42, 0x85, 0x46,
	0xae, 0xdd, 0x03, 0xb0, 0x3c, 0x12, 0xb3, 0x24, 0x9a, 0x92, 0xfc, 0x52, 0x2b, 0xc1, 0xd2, 0x4a,
	0xc1, 0x72, 0xff, 0xd0, 0x60, 0xb3, 0x40, 0x51, 0xb7, 0xdb, 0x82, 0x5a, 0xc0, 0x7c, 0x12, 0x67,
	0xef, 0x90, 0x02, 0x7a, 0x04, 0x30, 0x0d, 0x93, 0x53, 0x12, 0x0d, 0x99, 0x4f, 0x64, 0xdc, 0x75,
	0xaf, 0xa0, 0x11, 0xf6, 0x05, 0x59, 0x64, 0x76, 0x3d, 0xb5, 0x2f, 0x35, 0xc8, 0x01, 0xe3, 0x03,
	0x9e, 0xcf, 0x47, 0x74, 0x41, 0xec, 0xaa, 0xb4, 0xe6, 0x32, 0xda, 0x03, 0xe3, 0x9c, 0x60, 0x9e,
	0x44, 0x24, 0xb6, 0x6b, 0x05, 0x9f, 0xbf, 0x4c, 0x95, 0x5e, 0x6e, 0x15, 0xa1, 0x3e, 0xcd, 0xae,
	0x9f, 0x3d, 0xd2, 0xed, 0x02, 0x2a, 0x2a, 0xd5, 0x33, 0x4a, 0x4f, 0xd7, 0x57, 0x9f, 0xbe, 0x0d,
	0xf7, 0xde, 0xaa, 0x4a, 0x2a, 0xe4, 0x88, 0xfb, 0x0b, 0x6c, 0xad, 0xaa, 0xd5, 0x66, 0x08, 0xaa,
	0x01, 0x5e, 0x90, 0xcc, 0xdf, 0x62, 0x8d, 0x6c, 0x68, 0xfc, 0x46, 0xa2, 0x78, 0x59, 0x06, 0x99,
	0x88, 0x2c, 0xd0, 0x13, 0x95, 0xfe, 0xba, 0x27, 0x96, 0xee, 0x5f, 0x1a, 0xec, 0xe4, 0xa9, 0xdf,
	0x63, 0x01, 0xc7, 0x34, 0x20, 0x51, 0x21, 0x4a, 0x74, 0x81, 0x67, 0x64, 0xb8, 0x3c, 0x62, 0xa9,
	0x58, 0xc6, 0xa3, 0x72, 0x7d, 0x3c, 0xf4, 0x5b, 0xe2, 0x51, 0xbd, 0x31, 0x1e, 0xb5, 0x52, 0x3c,
	0x56, 0x5c, 0x57, 0xbf, 0xb1, 0xc4, 0x1b, 0xa5, 0x12, 0x7f, 0x06, 0xce, 0x55, 0xef, 0xbc, 0xb9,
	0xd6, 0x87, 0xd0, 0x1e, 0x61, 0x3a, 0x2f, 0x26, 0xf8, 0x13, 0xa8, 0xe3, 0x69, 0x9e, 0xb5, 0xad,
	0x6e, 0x5b, 0x26, 0x84, 0x40, 0x1d, 0x4a, 0xb5, 0xa7, 0xcc, 0x79, 0x25, 0x54, 0x0a, 0x95, 0xf0,
	0x67, 0x15, 0x1a, 0xaa, 0x5e, 0x51, 0x0b, 0x2a, 0xea, 0x38, 0xd3, 0xab, 0x50, 0x1f, 0x3d, 0x80,
	0x46, 0x12, 0x93, 0x48, 0xdc, 0x21, 0xa5, 0xd4, 0x85, 0x38, 0xf0, 0xf3, 0x10, 0xeb, 0x85, 0x10,
	0x3f, 0x04, 0x93, 0xfc, 0x4e, 0xf9, 0x78, 0x9a, 0xf9, 0xd0, 0xf4, 0x0c, 0xa1, 0xe8, 0x09, 0x0f,
	0x7e, 0x01, 0xf5, 0x98, 0x63, 0x9e, 0xc4, 0xd2, 0x7f, 0xad, 0x6e, 0x6b, 0x59, 0xc2, 0x42, 0xeb,
	0x29, 0x2b, 0xfa, 0x1e, 0x9a, 0xb1, 0x74, 0xc9, 0x58, 0xb4, 0x65, 0xe9, 0xcf, 0x66, 0xd7, 0xe9,
	0xa4, 0x2d, 0xb9, 0x93, 0xb5, 0xe4, 0xce, 0x28, 0xeb, 0xd9, 0x1e, 0xa4, 0x70, 0x19, 0x8a, 0xef,
	0x00, 0x62, 0x8e, 0x23, 0xc5, 0x6d, 0xdc, 0xca, 0x35, 0x25, 0x5a, 0x52, 0x9f, 0x83, 0x11, 0x25,
	0x41, 0x4a, 0x34, 0x24, 0x71, 0x67, 0x8d, 0x78, 0xa4, 0xfe, 0x01, 0xaf, 0x11, 0x25, 0x81, 0x64,
	0x7d, 0x0b, 0x20, 0x18, 0xe3, 0x39, 0x5d, 0x50, 0x6e, 0x9b, 0xb7, 0xf1, 0x4c, 0x01, 0x3e, 0x16,
	0x58, 0xb4, 0x0b, 0x4d, 0xf1, 0x39, 0xd1, 0x60, 0x36, 0xf6, 0x69, 0x64, 0x83, 0x74, 0x17, 0x28,
	0xd5, 0x11, 0x8d, 0x84, 0xeb, 0x63, 0xee, 0x8f, 0x59, 0xc2, 0xed, 0xa6, 0xfa, 0x52, 0xb8, 0x7f,
	0x92, 0xf0, 0xcc, 0x40, 0xa2, 0xc8, 0xde, 0xc8, 0x0d, 0xfd, 0x28, 0x5a, 0x4d, 0xc4, 0xbb, 0x57,
	0x24, 0xa2, 0xa8, 0x85, 0xf1, 0x9c, 0xc6, 0xdc, 0x6e, 0xa5, 0xd1, 0x11, 0x8a, 0x63, 0x1a, 0x73,
	0xf4, 0x7f, 0x80, 0x09, 0xe6, 0xd3, 0x8b, 0xf1, 0x05, 0x8b, 0xb9, 0xdd, 0x4e, 0xb9, 0x52, 0xf3,
	0x13, 0x8b, 0xb9, 0xe4, 0x26, 0x8b, 0x71, 0x5a, 0x58, 0x96, 0xe2, 0x26, 0x8b, 0xa1, 0xac, 0xad,
	0x1d, 0x30, 0x70, 0x14, 0xe1, 0x8f, 0x22, 0x49, 0x36, 0xd3, 0xd2, 0x96, 0xf2, 0xc0, 0x77, 0xff,
	0xd6, 0xa0, 0x59, 0xe8, 0xd2, 0x6b, 0xe9, 0x95, 0x65, 0x51, 0xe5, 0xba, 0x2c, 0x12, 0xe9, 0x55,
	0xbb, 0x32, 0x8b, 0xaa, 0x37, 0x66, 0xd1, 0x6a, 0x22, 0xd4, 0x3e, 0x25, 0x11, 0xbe, 0x06, 0x83,
	0x04, 0xfe, 0x7f, 0xcd, 0xbe, 0x06, 0x09, 0x7c, 0x21, 0xb9, 0x9f, 0x41, 0xad, 0x77, 0x91, 0x04,
	0x97, 0xa2, 0xd1, 0x4d, 0x59, 0xc0, 0x49, 0x90, 0x8e, 0x02, 0x1b, 0x5e, 0x26, 0xba, 0x67, 0xd0,
	0x50, 0x3d, 0xfa, 0x13, 0x3b, 0xa4, 0x03, 0xc6, 0xfb, 0x04, 0x07, 0x9c, 0xf2, 0x8f, 0xaa, 0x77,
	0xe5, 0xf2, 0xd3, 0x0e, 0xc0, 0xb2, 0xce, 0x91, 0x09, 0xb5, 0x33, 0xf1, 0x12, 0xeb, 0x0e, 0xda,
	0x16, 0xbf, 0x15, 0xf6, 0x47, 0xac, 0x1f, 0xf8, 0x87, 0x81, 0xdf, 0x9b, 0xb3, 0x98, 0x58, 0xda,
	0xd3, 0x5f, 0xc1, 0xcc, 0xdd, 0x85, 0xee, 0x82, 0xd9, 0x3b, 0x79, 0x7d, 0x7a, 0xdc, 0x1f, 0xf5,
	0x8f, 0xac, 0x3b, 0x52, 0x3c, 0x1c, 0xf6, 0xfa, 0xc7, 0xc7, 0xfd, 0x23, 0x4b, 0x43, 0x00, 0xf5,
	0x97, 0x87, 0x03, 0xb1, 0xae, 0xa0, 0x26, 0x34, 0x46, 0x83, 0xd7, 0xfd, 0x93, 0x37, 0x23, 0x4b,
	0x17, 0xc2, 0x69, 0x7f, 0x78, 0x34, 0x18, 0xfe, 0x68, 0x55, 0x85, 0xf0, 0x66, 0xf8, 0xf3, 0xf0,
	0xe4, 0xed, 0xd0, 0x82, 0xee, 0x3f, 0x55, 0x68, 0x67, 0x5f, 0xc2, 0x6b, 0x1c, 0xe0, 0x19, 0x89,
	0xd0, 0x0b, 0x30, 0xf3, 0x26, 0x87, 0xb6, 0x65, 0xc0, 0xca, 0xe3, 0x93, 0x73, 0xbf, 0xac, 0x56,
	0x2d, 0xf0, 0x0d, 0xa0, 0xf5, 0x06, 0x89, 0x1e, 0xad, 0xa2, 0xcb, 0x3f, 0x84, 0xb3, 0x7b, 0xad,
	0x5d, 0x6d, 0xfb, 0x02, 0xcc, 0x7c, 0x06, 0x52, 0x57, 0x2a, 0x8f, 0x4f, 0xea, 0x4a, 0x6b, 0xa3,
	0x12, 0x7a, 0xbe, 0xec, 0x96, 0xf7, 0x56, 0x66, 0x1d, 0xc5, 0xdb, 0x5a, 0x55, 0x2a, 0xd6, 0x37,
	0x60, 0x64, 0x83, 0x0d, 0xda, 0x2a, 0x4e, 0x2f, 0xd9, 0xbf, 0xec, 0x6c, 0x97, 0xb4, 0x8a, 0xd8,
	0x01, 0x23, 0x1b, 0x67, 0x14, 0xb1, 0x34, 0xdd, 0x38, 0x90, 0x5e, 0x54, 0x24, 0xdf, 0x81, 0x86,
	0x0e, 0xc0, 0xc8, 0x7e, 0x07, 0x85, 0x2f, 0x7d, 0x16, 0x45, 0xfc, 0x9e, 0x76, 0xa0, 0x09, 0x67,
	0xe4, 0x63, 0x8d, 0x72, 0x46, 0x79, 0x32, 0x52, 0xce, 0x58, 0x9f, 0x7e, 0x7e, 0x00, 0x58, 0x0e,
	0x13, 0x28, 0x45, 0xad, 0x8d, 0x1c, 0xce, 0x83, 0x35, 0xbd, 0xa2, 0xf7, 0x60, 0xa3, 0x38, 0x40,
	0x20, 0x5b, 0x02, 0xaf, 0x18, 0x35, 0x9c, 0x9d, 0x2b, 0x2c, 0xe9, 0x26, 0x93, 0xba, 0x2c, 0xcb,
	0x67, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x61, 0x51, 0x76, 0xfe, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkloadManagerClient is the client API for WorkloadManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkloadManagerClient interface {
	// SubmitJob submits new job to the workload manager and
	// returns job id that can be used to track job status.
	SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error)
	// SubmitJobContainer submits new job to the workload manager and
	// returns job id that can be used to track job status.
	SubmitJobContainer(ctx context.Context, in *SubmitJobContainerRequest, opts ...grpc.CallOption) (*SubmitJobContainerResponse, error)
	// CancelJob cancels job by job id.
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
	// JobInfo returns complete information about a particular job.
	// In case of JobArray the first job in slice is a root.
	// JobInfoResponse have to contain at least one element
	JobInfo(ctx context.Context, in *JobInfoRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	// JobSteps returns information about each individual job step.
	JobSteps(ctx context.Context, in *JobStepsRequest, opts ...grpc.CallOption) (*JobStepsResponse, error)
	// OpenFile opens a file and streams its content back. May be
	// useful for results collecting.
	OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (WorkloadManager_OpenFileClient, error)
	// TailFile opens a file and streams its content back. Unlike
	// OpenFile this call will watch file content changes and stream
	// new chunks continuously.
	TailFile(ctx context.Context, opts ...grpc.CallOption) (WorkloadManager_TailFileClient, error)
	// Resources returns partition resources
	// nodes, cpu, mem, wall-time and available features
	Resources(ctx context.Context, in *ResourcesRequest, opts ...grpc.CallOption) (*ResourcesResponse, error)
	// Partitions returns a list of available partitions.
	Partitions(ctx context.Context, in *PartitionsRequest, opts ...grpc.CallOption) (*PartitionsResponse, error)
	// WorkloadInfo provides info about workload (name, version, red-box uid)
	WorkloadInfo(ctx context.Context, in *WorkloadInfoRequest, opts ...grpc.CallOption) (*WorkloadInfoResponse, error)
}

type workloadManagerClient struct {
	cc *grpc.ClientConn
}

func NewWorkloadManagerClient(cc *grpc.ClientConn) WorkloadManagerClient {
	return &workloadManagerClient{cc}
}

func (c *workloadManagerClient) SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error) {
	out := new(SubmitJobResponse)
	err := c.cc.Invoke(ctx, "/api.WorkloadManager/SubmitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) SubmitJobContainer(ctx context.Context, in *SubmitJobContainerRequest, opts ...grpc.CallOption) (*SubmitJobContainerResponse, error) {
	out := new(SubmitJobContainerResponse)
	err := c.cc.Invoke(ctx, "/api.WorkloadManager/SubmitJobContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, "/api.WorkloadManager/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) JobInfo(ctx context.Context, in *JobInfoRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/api.WorkloadManager/JobInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) JobSteps(ctx context.Context, in *JobStepsRequest, opts ...grpc.CallOption) (*JobStepsResponse, error) {
	out := new(JobStepsResponse)
	err := c.cc.Invoke(ctx, "/api.WorkloadManager/JobSteps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (WorkloadManager_OpenFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorkloadManager_serviceDesc.Streams[0], "/api.WorkloadManager/OpenFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadManagerOpenFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkloadManager_OpenFileClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type workloadManagerOpenFileClient struct {
	grpc.ClientStream
}

func (x *workloadManagerOpenFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workloadManagerClient) TailFile(ctx context.Context, opts ...grpc.CallOption) (WorkloadManager_TailFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorkloadManager_serviceDesc.Streams[1], "/api.WorkloadManager/TailFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadManagerTailFileClient{stream}
	return x, nil
}

type WorkloadManager_TailFileClient interface {
	Send(*TailFileRequest) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type workloadManagerTailFileClient struct {
	grpc.ClientStream
}

func (x *workloadManagerTailFileClient) Send(m *TailFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workloadManagerTailFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workloadManagerClient) Resources(ctx context.Context, in *ResourcesRequest, opts ...grpc.CallOption) (*ResourcesResponse, error) {
	out := new(ResourcesResponse)
	err := c.cc.Invoke(ctx, "/api.WorkloadManager/Resources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Partitions(ctx context.Context, in *PartitionsRequest, opts ...grpc.CallOption) (*PartitionsResponse, error) {
	out := new(PartitionsResponse)
	err := c.cc.Invoke(ctx, "/api.WorkloadManager/Partitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) WorkloadInfo(ctx context.Context, in *WorkloadInfoRequest, opts ...grpc.CallOption) (*WorkloadInfoResponse, error) {
	out := new(WorkloadInfoResponse)
	err := c.cc.Invoke(ctx, "/api.WorkloadManager/WorkloadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadManagerServer is the server API for WorkloadManager service.
type WorkloadManagerServer interface {
	// SubmitJob submits new job to the workload manager and
	// returns job id that can be used to track job status.
	SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error)
	// SubmitJobContainer submits new job to the workload manager and
	// returns job id that can be used to track job status.
	SubmitJobContainer(context.Context, *SubmitJobContainerRequest) (*SubmitJobContainerResponse, error)
	// CancelJob cancels job by job id.
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
	// JobInfo returns complete information about a particular job.
	// In case of JobArray the first job in slice is a root.
	// JobInfoResponse have to contain at least one element
	JobInfo(context.Context, *JobInfoRequest) (*JobInfoResponse, error)
	// JobSteps returns information about each individual job step.
	JobSteps(context.Context, *JobStepsRequest) (*JobStepsResponse, error)
	// OpenFile opens a file and streams its content back. May be
	// useful for results collecting.
	OpenFile(*OpenFileRequest, WorkloadManager_OpenFileServer) error
	// TailFile opens a file and streams its content back. Unlike
	// OpenFile this call will watch file content changes and stream
	// new chunks continuously.
	TailFile(WorkloadManager_TailFileServer) error
	// Resources returns partition resources
	// nodes, cpu, mem, wall-time and available features
	Resources(context.Context, *ResourcesRequest) (*ResourcesResponse, error)
	// Partitions returns a list of available partitions.
	Partitions(context.Context, *PartitionsRequest) (*PartitionsResponse, error)
	// WorkloadInfo provides info about workload (name, version, red-box uid)
	WorkloadInfo(context.Context, *WorkloadInfoRequest) (*WorkloadInfoResponse, error)
}

// UnimplementedWorkloadManagerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkloadManagerServer struct {
}

func (*UnimplementedWorkloadManagerServer) SubmitJob(ctx context.Context, req *SubmitJobRequest) (*SubmitJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (*UnimplementedWorkloadManagerServer) SubmitJobContainer(ctx context.Context, req *SubmitJobContainerRequest) (*SubmitJobContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJobContainer not implemented")
}
func (*UnimplementedWorkloadManagerServer) CancelJob(ctx context.Context, req *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (*UnimplementedWorkloadManagerServer) JobInfo(ctx context.Context, req *JobInfoRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobInfo not implemented")
}
func (*UnimplementedWorkloadManagerServer) JobSteps(ctx context.Context, req *JobStepsRequest) (*JobStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobSteps not implemented")
}
func (*UnimplementedWorkloadManagerServer) OpenFile(req *OpenFileRequest, srv WorkloadManager_OpenFileServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (*UnimplementedWorkloadManagerServer) TailFile(srv WorkloadManager_TailFileServer) error {
	return status.Errorf(codes.Unimplemented, "method TailFile not implemented")
}
func (*UnimplementedWorkloadManagerServer) Resources(ctx context.Context, req *ResourcesRequest) (*ResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resources not implemented")
}
func (*UnimplementedWorkloadManagerServer) Partitions(ctx context.Context, req *PartitionsRequest) (*PartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Partitions not implemented")
}
func (*UnimplementedWorkloadManagerServer) WorkloadInfo(ctx context.Context, req *WorkloadInfoRequest) (*WorkloadInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkloadInfo not implemented")
}

func RegisterWorkloadManagerServer(s *grpc.Server, srv WorkloadManagerServer) {
	s.RegisterService(&_WorkloadManager_serviceDesc, srv)
}

func _WorkloadManager_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadManager/SubmitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).SubmitJob(ctx, req.(*SubmitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_SubmitJobContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).SubmitJobContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadManager/SubmitJobContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).SubmitJobContainer(ctx, req.(*SubmitJobContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadManager/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_JobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).JobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadManager/JobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).JobInfo(ctx, req.(*JobInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_JobSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).JobSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadManager/JobSteps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).JobSteps(ctx, req.(*JobStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_OpenFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpenFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkloadManagerServer).OpenFile(m, &workloadManagerOpenFileServer{stream})
}

type WorkloadManager_OpenFileServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type workloadManagerOpenFileServer struct {
	grpc.ServerStream
}

func (x *workloadManagerOpenFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkloadManager_TailFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkloadManagerServer).TailFile(&workloadManagerTailFileServer{stream})
}

type WorkloadManager_TailFileServer interface {
	Send(*Chunk) error
	Recv() (*TailFileRequest, error)
	grpc.ServerStream
}

type workloadManagerTailFileServer struct {
	grpc.ServerStream
}

func (x *workloadManagerTailFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workloadManagerTailFileServer) Recv() (*TailFileRequest, error) {
	m := new(TailFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WorkloadManager_Resources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Resources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadManager/Resources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Resources(ctx, req.(*ResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Partitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Partitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadManager/Partitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Partitions(ctx, req.(*PartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_WorkloadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).WorkloadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadManager/WorkloadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).WorkloadInfo(ctx, req.(*WorkloadInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkloadManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.WorkloadManager",
	HandlerType: (*WorkloadManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _WorkloadManager_SubmitJob_Handler,
		},
		{
			MethodName: "SubmitJobContainer",
			Handler:    _WorkloadManager_SubmitJobContainer_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _WorkloadManager_CancelJob_Handler,
		},
		{
			MethodName: "JobInfo",
			Handler:    _WorkloadManager_JobInfo_Handler,
		},
		{
			MethodName: "JobSteps",
			Handler:    _WorkloadManager_JobSteps_Handler,
		},
		{
			MethodName: "Resources",
			Handler:    _WorkloadManager_Resources_Handler,
		},
		{
			MethodName: "Partitions",
			Handler:    _WorkloadManager_Partitions_Handler,
		},
		{
			MethodName: "WorkloadInfo",
			Handler:    _WorkloadManager_WorkloadInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenFile",
			Handler:       _WorkloadManager_OpenFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TailFile",
			Handler:       _WorkloadManager_TailFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/workload/api/workload.proto",
}
